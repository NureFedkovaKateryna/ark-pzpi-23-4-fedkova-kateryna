Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії












ЗВІТ
з практичної роботи № 1
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду на Python: PEP8»








Виконала
ст. гр. ПЗПІ-23-4
Федькова Катерина
Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович




Харків 2025
1 МЕТА
Метою даної роботи є ознайомлення з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для мови програмування Python, а також навчитися аналізувати та рефакторити код для покращення його якості.
2 ХІД РОБОТИ
Python – це інтерпретована мова програмування високого рівня. Вона підтримує кілька парадигм програмування, має велику екосистему бібліотек і використовується в таких сферах, як веб-розробка, аналіз даних, машинне навчання, автоматизація та створення ігор. PEP 8 – це офіційний стильовий посібник для Python, який встановлює правила написання коду. 
Правильне оформлення коду дуже важливе для програміста через декілька причин:
* чистота – код виглядає акуратно та структуровано;
* читабельність – код легко зрозуміти іншим програмістам;
* підтримуваність – правильно оформлений код простіше виправляти, розширювати та тестувати;
* командна робота – єдині стандарти дозволяють уникати плутанини в проектах із багатьма розробниками;
* професійність – дотримання стилю коду є ознакою якісної роботи й підвищує довіру до програміста.
Саме тому дотримання рекомендацій PEP 8 є невід’ємною частиною якісної розробки.
Рекомендація: дотримуйтеся стилей іменування. 
Опис: коли програміст пише код, йому треба називати багато речей: змінні, функції, класи, пакети. Вибір розумних імен заощадить час та енергію пізніше. Ви зможете зрозуміти з назви, що представляє певна змінна, функція або клас. Ви також уникнете використання потенційно заплутаних імен, які можуть призвести до помилок, які важко налагодити.


Приклад:
# Поганий приклад
 
# Пакет
from CustomerAnalytics import GenerateReport
 
# Модуль
import MathUtils
 
# Функція
def AddNums():
    pass
 
# Змінна
FirstNumber = 1
 
# Константа
piNumber = 3.14
 
# Клас та метод
class online_course_platform:
    def EnrollStudentInCourse(self):
        pass
 
# Гарний приклад
 
# Пакет
from customeranalytics import generate_report
 
# Модуль
import math_utils
 
# Функція
def add_nums():
    pass
 
# Змінна
first_number = 1
 
# Константа
PI_NUMBER = 3.14
 
# Клас та метод
class OnlineCoursePlatform:
    def enroll_student_in_course(self):
        pass


Для назви функції або методу використовуйте слово або слова з малої літери, розділяйте слова символами підкреслення. Для назви змінної використовуйте одну літеру, слово або слова з малої літери, розділяйте слова символами підкреслення. Для класу починайте кожне слово з великої літери, не розділяйте слова символами підкреслення. Ім’ям константи може бути одна літера, слово або слова з великої літери, розділяйте слова символами підкреслення. Для модулю використовуйте слово або слова з малої літери, розділяйте слова символами підкреслення. Для пакету використовуйте слово або слова з малої літери, не розділяйте слова символами підкреслення. 
Рекомендація: не використовуйте однолітерні імена l, O або I. 
Опис: такі символи можна сплутати з 1 та 0, залежно від того, який шрифт використовує програміст. 
Приклад:
# Поганий приклад
O = 2
l = 3
 
# Гарний приклад
first_number = 2
second_number = 3


Рекомендація: використовуйте зрозумілі й описові назви змінних.
Опис: вибір імен для змінних, функцій, класів може бути складним завданням. Програмісту слід добре продумати вибір імен під час написання коду, оскільки це зробить код більш читабельним. Найкращий спосіб іменувати об'єкти в Python – це використовувати описові імена, щоб було зрозуміло, що представляє об'єкт. 
Приклад:
# Поганий приклад
a = "Python Code-Conventions"
b, c = a.split()
print(f"{c}, {b}")
 
# Гарний приклад
lecture_title = "Python Code-Conventions"
language, topic = lecture_title.split()
print(f"{topic}, {language}")


Коли програміст читає коментар, то він повинен легко зрозуміти код, до якого стосується коментар, і знати, як він поєднується з рештою коду. Під час додавання коментарів до коду слід пам’ятати:
* Обмежте довжину рядка коментарів та рядків документації до 72 символів.
* Використовуйте повні речення, починаючи з великої літери.
* Обов’язково оновлюйте коментарі, якщо ви змінюєте свій код.
Існує декілька типів коментарів: блокові коментарі, рядкові коментарі та рядки документації. 
Рекомендація: використовуйте блокові коментарі для документування невеликої частини коду. PEP 8 надає такі правила написання блокових коментарів:
* Зробіть відступ блокових коментарів на тому ж рівні, що й код, який вони описують.
* Почніть кожен рядок із символу #, а потім один пробіл.
* Розділіть абзаци рядком, що містить один символ #.
Опис: блокові коментарі важливі для того, щоб допомогти іншим зрозуміти призначення та функціональність певного блоку коду.
Приклад:
# Поганий приклад
for number in range(0, 10):
# Ітерація по `number` десять разів та вивід на екран значення `number`.
    print(number)
 
# Гарний приклад
for number in range(0, 10):
    # Ітерація по `number` десять разів та вивід на екран значення `number`.
    print(number)


Рекомендація: використовуйте рядкові коментарі для пояснення окремого твердження у фрагменті коду. PEP 8 надає такі правила написання рядкових коментарів: 
* Використовуйте рядкові коментарі економно.
* Пишіть рядкові коментарі в тому ж рядку, що й твердження, на яке вони посилаються.
* Відокремлюйте рядкові коментарі від твердження двома або більше пробілами.
* Починайте рядкові коментарі з # та одного пробілу.
* Не використовуйте їх для пояснення очевидного.
Опис: рядкові коментарі корисні, щоб нагадати або пояснити іншим, чому певний рядок коду необхідний. Але програміст повинен писати свій код так, щоб він був зрозумілим сам по собі, коли це можливо, та залишати коментарі для ситуацій, коли потрібні додаткові пояснення. 
Приклад:
# Поганий приклад
a = "Python Code-Conventions"  # Presentation Title
 
# Гарний приклад
presentation_title = "Python Code-Conventions"


Рекомендація: використовуйте рядки документації для пояснення та документування публічних модулів, функцій, класів та методів. PEP 8 надає такі правила написання рядкових коментарів: 
* Якщо реалізація проста, використовуйте однорядковий рядок документації.
* Якщо реалізація складніша, починайте з оглядового опису в першому рядку. Потім використовуйте більше тексту для документування об'єкт коду.
Опис: рядки документації – це структурований підхід до документування коду Python. Програміст повинен писати їх для всіх публічних модулів, функцій, класів та методів. Вони забезпечують структурований підхід до документування та полегшують підтримку й розширення коду.
Приклад:
# Поганий приклад
def add_two_numbers(a, b):
    # додаємо a та b
    return a + b
 
# Гарний приклад
def add_two_numbers(a, b):
    """Add a to b."""
    return a + b


Рекомендація: відділяйте функції верхнього рівня та визначення класів двома порожніми рядками, а визначення методів усередині класу одним порожнім рядком. 
Опис: код, згрупований разом, може бути перевантаженим і важким для читання. Правильне структурування коду допомагає візуально зрозуміти, як ваш код поділено на частини та як ці частини пов’язані один з одним.
Приклад:
# Поганий приклад
class Dog:
    def eat(self):
        return None
    def bark(self):
        return None
 
class Cat:
    pass
 
# Гарний приклад
class Dog:
    def eat(self):
        return None
   
    def bark(self):
        return None
 


class Cat:
    pass


Рекомендація: порожні рядки всередині функцій слід використовувати лише для того, щоб відокремити логічні блоки коду.
Опис: відокремлення блоків коду допомагає читачеві краще зрозуміти послідовність виконання, особливо якщо перед return є кілька підготовчих кроків.
Приклад:
# Поганий приклад
def calculate_mean(numbers):
    sum_numbers = 0
   
    for number in numbers:
        sum_numbers = sum_numbers + number
   
    mean = sum_numbers / len(numbers)
 
    return mean
 
# Гарний приклад
def calculate_mean(numbers):
    sum_numbers = 0
    for number in numbers:
        sum_numbers = sum_numbers + number
    mean = sum_numbers / len(numbers)
    return mean


Рекомендація: функція повинна виконувати одне конкретне завдання, а її назва – відображати дію або результат. Подібні функції мають мати узгоджені назви й структуру. Уникайте надмірної кількості параметрів; за потреби об’єднуйте їх у структури.
Опис: чітке призначення та зрозумілі назви функцій полегшують читання й супровід коду. Узгодженість у структурі та іменуванні підвищує якість програмного продукту та знижує ймовірність помилок.
Приклад:
# Поганий приклад
def data(a, b, c, d, e):
    result = (a + b + c) * (1 - d/100) + e
    print(result)
 
# Гарний приклад
from dataclasses import dataclass
 
@dataclass
class Order:
    items_total: float
    shipping_cost: float
    tax_rate: float
    discount_rate: float = 0.0
 
def calculate_final_price(order):
    """Обчислює фінальну ціну замовлення після знижки та податку."""
    subtotal = order.items_total - (order.items_total * order.discount_rate)
    taxed = subtotal * (1 + order.tax_rate)
    return taxed + order.shipping_cost


Рекомендація: використовуйте 4 пробіли для кожного рівня відступу. Табуляцію застосовуйте лише для сумісності з існуючим кодом, що її використовує. Забороняється змішувати пробіли й табуляцію.
Опис: єдиний стиль відступів забезпечує читабельність коду та запобігає помилкам виконання.
Рекомендація: при перенесенні довгих рядків елементи слід або вирівнювати вертикально всередині дужок або застосовувати висячий відступ. Якщо використовується висячий відступ:
* перший рядок не повинен містити аргументів;
* у наступних рядках потрібно додати відступ, щоб їх було чітко видно як продовження.
Опис: правильне оформлення перенесених рядків підвищує читабельність коду та робить його структуру зрозумілою навіть у складних виразах.
Приклад:
# Поганий приклад
foo = long_function_name(arg_one, arg_two,
    arg_three, arg_four)
 
def long_function_name(
    arg_one, arg_two, arg_three,
    arg_four):
    print(arg_one)
 
# Гарний приклад
foo = long_function_name(arg_one, arg_two,
                         arg_three, arg_four)
 
def long_function_name(
        arg_one, arg_two, arg_three,
        arg_four):
    print(arg_one)


Рекомендація: закриваюча фігурна/квадратна дужка в багаторядкових конструкціях може розташовуватися під першим не пробілним символом останнього рядка списку або вона може розташовуватися під першим символом рядка, з якого починається багаторядкова конструкція.
Опис: узгоджене розташування закриваючих дужок у багаторядкових конструкціях забезпечує єдиний стиль коду, полегшує його читання та сприйняття, а також допомагає швидше знаходити межі виразів.
Приклад:
# Поганий приклад
my_list = [
    1, 2, 3,
    4, 5, 6,]
 
# Гарний приклад
my_list = [
    1, 2, 3,
    4, 5, 6,
    ]
 
my_list = [
    1, 2, 3,
    4, 5, 6,
]


Рекомендація: модулі повинні мати короткі, але зрозумілі назви. Якщо файл містить один клас, його можна назвати так само, як клас, але з маленьких літер. Уникайте пробілів, спеціальних символів і надто довгих назв.
Опис: зрозумілі та узгоджені назви модулів полегшують навігацію в проекті, роблять структуру коду логічною та зменшують ризик помилок під час імпорту.
Рекомендація: Кожен проект повинен мати логічну структуру папок, щоб спростити навігацію та підтримку.
Опис: чітка структура папок забезпечує швидкий доступ до файлів, полегшує орієнтування в проекті та спрощує його супровід і розвиток.
3 ВИСНОВКИ
Дотримання стандартів кодування PEP8 у Python є важливою практикою для створення зрозумілого та професійного коду. Цей стандарт забезпечує єдині правила оформлення, що спрощує читання і сприйняття коду іншими розробниками. Використання стандартів підвищує якість програмного продукту, робить його більш передбачуваним і легким для супроводу та розвитку. Крім того, дотримання правил кодування сприяє ефективній командній роботі, оскільки всі учасники проекту користуються одними й тими ж принципами структурування та оформлення.
4 ВИКОРИСТАНІ ДЖЕРЕЛА
1. Finer J. How to Write Beautiful Python Code With PEP 8 – Real Python. Python Tutorials – Real Python. URL: https://realpython.com/python-pep8/ (дата звернення: 29.09.2025).
2. PEP 8 – Style Guide for Python Code | peps.python.org. Python Enhancement Proposals (PEPs). URL: https://peps.python.org/pep-0008/ (дата звернення: 29.09.2025).
ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://www.youtube.com/watch?v=BrupACYmbkA
Хронологічний опис відеозапису:
00:00 – Вступ
00:25 – Зміст
00:40 – Про Python та PEP8
01:42 – Стилі іменування
03:13 – Однолітерні імена
03:46 – Зрозумілі назви змінних
04:33 – Коментарі
05:07 – Блокові коментарі
06:00 – Рядкові коменарі
07:13 – Рядки документації
08:37 – Порожні рядки для функцій та класів
09:32 – Порожні рядки у функціях
10:21 – Функції
11:25 – Використання пробілів та табуляції
11:47 – Перенесення довгих рядків
12:56 – Багаторядкові конструкції
14:08 – Файли та структура проекту
14:59 – Висновки
ДОДАТОК Б
Скріншоти презентації


  

Рисунок Б.1 - Титульний лист
  

Рисунок Б.2 - Зміст
  

Рисунок Б.3 - Про Python та PEP8


  

Рисунок Б.4 - Силі іменування


  

Рисунок Б.5 - Використання однолітерних імен


  

Рисунок Б.6 - Використання зрозумілих назв


  

Рисунок Б.7 - Коментарі


  

Рисунок Б.8 - Блокові коментарі


  

Рисунок Б.9 - Рядкові коментарі


  

Рисунок Б.10 - Рядки документації


  

Рисунок Б.11 - Використання порожніх рядків


  

Рисунок Б.12 - Використання порожніх рядків в функціях


  

Рисунок Б.13 - Оформлення функцій


  

Рисунок Б.14 - Форматування коду


  

Рисунок Б.15 - Форматування коду


  

Рисунок Б.16 - Форматування коду


  

Рисунок Б.17 - Оформлення файлів та структури проекту


  

Рисунок Б.18 - Висновки


  

Рисунок Б.19 - Список використаних джерел